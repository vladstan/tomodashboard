input AddIncomingReqSubscriptionInput {
  agentId: String!
  clientSubscriptionId: String
}

type AddIncomingReqSubscriptionPayload {
  incomingReq: IncomingReq
  incomingReqEdge: incomingReqsEdge
  clientSubscriptionId: String
}

input AddMessageSubscriptionInput {
  userId: String
  clientSubscriptionId: String
}

type AddMessageSubscriptionPayload {
  message: Message
  messageEdge: messagesEdge
  user: User
  clientSubscriptionId: String
}

type Agent implements Node {
  # The ID of an object
  id: ID!
  _id: String
  fbUserId: String
  name: String
  email: String
  pictureUrl: String
  fbAccessToken: String
  incomingReqs(after: String, first: Int, before: String, last: Int): incomingReqsConnection
  users(after: String, first: Int, before: String, last: Int): usersConnection
}

input GetSummaryLinkInput {
  summary: String!
  agentId: String!
  userId: String!
  clientMutationId: String
}

type GetSummaryLinkPayload {
  link: String
  clientMutationId: String
}

type IncomingReq implements Node {
  # The ID of an object
  id: ID!
  _id: String
  type: String
  userId: String
  messageText: String
  user: User
}

# A connection to a list of items.
type incomingReqsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [incomingReqsEdge]
}

# An edge in a connection.
type incomingReqsEdge {
  # The item at the end of the edge
  node: IncomingReq

  # A cursor for use in pagination
  cursor: String!
}

type Message implements Node {
  # The ID of an object
  id: ID!
  _id: String
  type: String
  text: String
  senderId: String
  receiverId: String
  senderType: String
  receiverType: String
}

# A connection to a list of items.
type messagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [messagesEdge]
}

# An edge in a connection.
type messagesEdge {
  # The item at the end of the edge
  node: Message

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  sendMessage(input: SendMessageInput!): SendMessagePayload
  switchBotAgent(input: SwitchBotAgentInput!): SwitchBotAgentPayload
  updateStripeDetails(input: UpdateStripeDetailsInput!): UpdateStripeDetailsPayload
  getSummaryLink(input: GetSummaryLinkInput!): GetSummaryLinkPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Profile implements Node {
  # The ID of an object
  id: ID!
  _id: String
  userId: String
  name: String
  firstName: String
  lastName: String
  pictureUrl: String
  gender: String
  locale: String
  timezone: Int
  prefs: ProfilePrefs
}

type ProfilePrefs implements Node {
  # The ID of an object
  id: ID!
  home_airport: String
  accommodation: String
  accommodation_budget: String
  accommodation_budget_currency: String
  flight_cabin: String
  flight_seat: String
  next_trip_type: String
  next_trip_destination: String
  next_trip_time: String
  next_trip_purpose: String
  next_trip_extra: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  user(_id: String): User
  agent(token: String): Agent
  summary(_id: String): Summary
}

input SendMessageInput {
  type: String!
  text: String!
  senderId: String!
  receiverId: String!
  receiverFacebookId: String!
  senderType: String!
  receiverType: String!
  userId: String!
  clientMutationId: String
}

type SendMessagePayload {
  messageEdge: messagesEdge
  user: User
  clientMutationId: String
}

type StripeCredentials implements Node {
  # The ID of an object
  id: ID!
  customerId: String
}

type Subscription {
  addIncomingReq(input: AddIncomingReqSubscriptionInput!): AddIncomingReqSubscriptionPayload
  updateIncomingReq(input: UpdateIncomingReqSubscriptionInput!): UpdateIncomingReqSubscriptionPayload
  addMessage(input: AddMessageSubscriptionInput!): AddMessageSubscriptionPayload
}

type Summary implements Node {
  # The ID of an object
  id: ID!
  _id: String
  fields(after: String, first: Int, before: String, last: Int): summaryFieldsConnection
  total: Int
  user: User
  agent: Agent
}

type SummaryField implements Node {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  price: Int
  segments: Int
  segmentPrice: Int
}

# A connection to a list of items.
type summaryFieldsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [summaryFieldsEdge]
}

# An edge in a connection.
type summaryFieldsEdge {
  # The item at the end of the edge
  node: SummaryField

  # A cursor for use in pagination
  cursor: String!
}

input SwitchBotAgentInput {
  userId: String!
  botMuted: Boolean!
  agentName: String!
  userFbId: String!
  clientMutationId: String
}

type SwitchBotAgentPayload {
  user: User
  clientMutationId: String
}

input UpdateIncomingReqSubscriptionInput {
  userId: String!
  clientSubscriptionId: String
}

type UpdateIncomingReqSubscriptionPayload {
  incomingReq: IncomingReq
  clientSubscriptionId: String
}

input UpdateStripeDetailsInput {
  userId: String!
  name: String!
  token: String!
  clientMutationId: String
}

type UpdateStripeDetailsPayload {
  user: User
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  _id: String
  facebookId: String
  profile: Profile
  messages(after: String, first: Int, before: String, last: Int): messagesConnection
  botMuted: Boolean
  stripe: StripeCredentials
}

# A connection to a list of items.
type usersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [usersEdge]
}

# An edge in a connection.
type usersEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}
