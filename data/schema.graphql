schema {
  query: Query
  subscription: Subscription
}

input AddIncomingReqSubscriptionInput {
  clientSubscriptionId: String
}

type AddIncomingReqSubscriptionPayload {
  incomingReq: IncomingReq
  incomingReqEdge: incomingReqsEdge
  user: User
  clientSubscriptionId: String
}

type IncomingReq implements Node {
  id: ID!
  _id: String
  type: String
  userId: String
  messageText: String
}

type incomingReqsConnection {
  pageInfo: PageInfo!
  edges: [incomingReqsEdge]
}

type incomingReqsEdge {
  node: IncomingReq
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile implements Node {
  id: ID!
  _id: String
  userId: String
  name: String
}

type Query {
  node(id: ID!): Node
  user(_id: String): User
}

type Subscription {
  addIncomingReq(input: AddIncomingReqSubscriptionInput!): AddIncomingReqSubscriptionPayload
}

type User implements Node {
  id: ID!
  _id: String
  facebookId: String
  profile: Profile
  incomingReqs(after: String, first: Int, before: String, last: Int): incomingReqsConnection
}
